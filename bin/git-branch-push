#! /bin/sh

usage() {
    cat << EOF
Usage:
    git branch-push [<remote-branch>]
        Pushes HEAD to the <remote-branch>. If <remote-branch> is omitted,
        it defaults to the current branch's upstream. Either way, <remote
        -branch> must exist.

    git branch-push --no-prompt [<remote-branch>]
        The same as above, but the user is not prompted before pushing.

    git branch-push --force <remote-branch>
        Force pushes HEAD to the <remote-branch>. <remote-branch> must be
        specified, must exist, and must be up to date with the remote.

    git branch-push --create <remote-branch>
        Creates <remote-branch> on the remote and pushes HEAD to it.

    git branch-push --delete <remote-branch>
        Deletes <remote-branch> on the remote.
EOF
}

fail() {
    echo $@ 1>&2
    exit 1
}

usageFail() {
    echo "Error: $@" 1>&2
    usage
    exit 1
}

sourceRef=''
remoteBranch=''
promptMode='true'
while [ $# -gt 0 ]; do
    case "$1" in
    --no-prompt)
        promptMode=''
        ;;
    --from)
        sourceRef="$2"
        shift
        ;;
    --force)
        forceMode='true'
        ;;
    --create)
        createMode='true'
        ;;
    --delete)
        deleteMode='true'
        ;;
    --help|-h)
        usage
        exit 0
        ;;
    -*=*)
        flag=$(echo "$1" | sed -E 's/(-[^=]+)=.+/\1/')
        value=$(echo "$1" | sed -E 's/-[^=]+=(.+)/\1/')
        shift
        set -- "$flag" "$value" $@
        continue
        ;;
    -*)
        usageFail "Unrecognized option: \"$1\""
        ;;
    *)
        if [ -n "$remoteBranch" ]; then
            usageFail 'Too many arguments!'
        fi
        remoteBranch="$1"
    esac
    shift
done

if [ "$createMode" = 'true' -a "$deleteMode" = 'true' ] \
   || [ "$createMode" = 'true' -a "$forceMode" = 'true' ] \
   || [ "$deleteMode" = 'true' -a "$forceMode" = 'true' ] \
   || [ "$deleteMode" = 'true' -a -n "$sourceRef" ]; then
   usageFail 'Incompatible combination of flags'
fi

if [ -z "$remoteBranch" ]; then
    if [ "$createMode" = 'true' ]; then
        usageFail '--create requires a <remote-branch> to be specified.'
    fi
    if [ "$deleteMode" = 'true' ]; then
        usageFail '--delete requires a <remote-branch> to be specified.'
    fi
    if [ "$forceMode" = 'true' ]; then
        usageFail '--force requires a <remote-branch> to be specified.'
    fi
    if [ -n "$sourceRef" ]; then
        usageFail '--from requires a <remote-branch> to be specified.'
    fi
    remoteBranch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null)
    if [ $? -ne 0 ]; then
        fail "Unable to find an upstream branch for \"$(git rev-parse --abbrev-ref HEAD)\"."
    fi
fi

if [ -z "$sourceRef" ]; then
    sourceRef='HEAD'
fi

remote=$(echo $remoteBranch | cut -d'/' -f1)
branch=$(echo $remoteBranch | sed "s:^$remote/::")

if [ "$remote/$branch" != "$remoteBranch" ]; then
    fail "\"$remoteBranch\" isn't in the format \"<remote>/<branch>\""
fi

if [ "$(git remote 2> /dev/null | grep $remote)" != "$remote"  ]; then
    fail "\"$remote\" doesn't appear to be a valid remote."
fi

if git show-branch $remoteBranch > /dev/null 2>&1; then
    remoteBranchExists='true'
fi

if [ "$createMode" = 'true' -a "$remoteBranchExists" = 'true' ]; then
    fail "Remote branch \"$remoteBranch\" already exists."
elif [ "$createMode" != 'true' -a "$remoteBranchExists" != 'true' ]; then
    fail "Remote branch \"$remoteBranch\" does not exist."
fi

if [ "$createMode" != 'true' -a "$deleteMode" != 'true' ]; then
    sourceHash="$(git rev-parse $sourceRef)"
    remoteHash="$(git rev-parse $remoteBranch)"
    if [ "$sourceHash" = "$remoteHash" ]; then
        echo 'Nothing to push.'
        exit 0
    fi

    commitCount="$(git rev-list --count $remoteHash..$sourceHash)"
    echo 'Commits to push:'
    git --no-pager log --reverse --format=format:' %C(magenta)%ar %C(green)%an%Creset %s' $remoteHash..$sourceHash
    echo
    echo " $commitCount commits total"
    echo
    echo 'Files changed:'
    git --no-pager diff --stat -M10% $remoteHash..$sourceHash
    echo
fi

if [ "$promptMode" == 'true' ]; then
    echo -e "Destination branch: $(tput setaf 2)$remoteBranch$(tput sgr 0)"
    echo
    echo -n 'Continue with push? (y/N) '
    read -n 1 answer
    echo
    if [ "$answer" != 'y' -a "$answer" != 'Y' ]; then
        exit 0
    fi
    echo
fi

if [ "$deleteMode" = 'true' ]; then
    git push $remote --delete $branch
elif [ "$forceMode" = 'true' ]; then
    git push --force-with-lease $remote $sourceRef:$branch
else
    git push $remote $sourceRef:$branch
fi

exit $?
